/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Description, Description$ } from "./description";
import { Name, Name$ } from "./name";
import { z } from "zod";

/**
 * Methods by which Pok√©mon can learn moves.
 */
export type MoveLearnMethod = {
    /**
     * The identifier for this move learn method resource.
     */
    id: number;
    /**
     * The name for this move learn method resource.
     */
    name: string;
    /**
     * The description of this move learn method listed in different languages.
     */
    descriptions?: Array<Description> | undefined;
    /**
     * The name of this move learn method listed in different languages.
     */
    names?: Array<Name> | undefined;
};

/** @internal */
export namespace MoveLearnMethod$ {
    export type Inbound = {
        id: number;
        name: string;
        descriptions?: Array<Description$.Inbound> | undefined;
        names?: Array<Name$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<MoveLearnMethod, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            descriptions: z.array(Description$.inboundSchema).optional(),
            names: z.array(Name$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.descriptions === undefined ? null : { descriptions: v.descriptions }),
                ...(v.names === undefined ? null : { names: v.names }),
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        descriptions?: Array<Description$.Outbound> | undefined;
        names?: Array<Name$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoveLearnMethod> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            descriptions: z.array(Description$.outboundSchema).optional(),
            names: z.array(Name$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.descriptions === undefined ? null : { descriptions: v.descriptions }),
                ...(v.names === undefined ? null : { names: v.names }),
            };
        });
}
