/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { BerryFirmness, BerryFirmness$ } from "./berryfirmness";
import { BerryFlavorMap, BerryFlavorMap$ } from "./berryflavormap";
import { z } from "zod";

export type Berry = {
    /**
     * The identifier for this berry resource
     */
    id: number;
    /**
     * The name for this berry resource
     */
    name: string;
    /**
     * Time it takes the tree to grow one stage, in hours. Berry trees go through four of these growth stages before they can be picked.
     */
    growthTime: number;
    /**
     * The maximum number of these berries that can grow on one tree in Generation IV
     */
    maxHarvest: number;
    /**
     * The power of the move "Natural Gift" when used with this Berry
     */
    naturalGiftPower: number;
    /**
     * The size of this Berry, in millimeters
     */
    size: number;
    /**
     * The smoothness of this Berry, used in making Pok√©blocks or Poffins
     */
    smoothness: number;
    /**
     * The speed at which this Berry dries out the soil as it grows. A higher rate means the soil dries more quickly.
     */
    soilDryness: number;
    firmness: BerryFirmness;
    /**
     * A list of references to each flavor a berry can have and the potency of each of those flavors in regard to this berry.
     */
    flavors: Array<BerryFlavorMap>;
};

/** @internal */
export namespace Berry$ {
    export type Inbound = {
        id: number;
        name: string;
        growth_time: number;
        max_harvest: number;
        natural_gift_power: number;
        size: number;
        smoothness: number;
        soil_dryness: number;
        firmness: BerryFirmness$.Inbound;
        flavors: Array<BerryFlavorMap$.Inbound>;
    };

    export const inboundSchema: z.ZodType<Berry, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            growth_time: z.number().int(),
            max_harvest: z.number().int(),
            natural_gift_power: z.number().int(),
            size: z.number().int(),
            smoothness: z.number().int(),
            soil_dryness: z.number().int(),
            firmness: BerryFirmness$.inboundSchema,
            flavors: z.array(BerryFlavorMap$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                growthTime: v.growth_time,
                maxHarvest: v.max_harvest,
                naturalGiftPower: v.natural_gift_power,
                size: v.size,
                smoothness: v.smoothness,
                soilDryness: v.soil_dryness,
                firmness: v.firmness,
                flavors: v.flavors,
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        growth_time: number;
        max_harvest: number;
        natural_gift_power: number;
        size: number;
        smoothness: number;
        soil_dryness: number;
        firmness: BerryFirmness$.Outbound;
        flavors: Array<BerryFlavorMap$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Berry> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            growthTime: z.number().int(),
            maxHarvest: z.number().int(),
            naturalGiftPower: z.number().int(),
            size: z.number().int(),
            smoothness: z.number().int(),
            soilDryness: z.number().int(),
            firmness: BerryFirmness$.outboundSchema,
            flavors: z.array(BerryFlavorMap$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                growth_time: v.growthTime,
                max_harvest: v.maxHarvest,
                natural_gift_power: v.naturalGiftPower,
                size: v.size,
                smoothness: v.smoothness,
                soil_dryness: v.soilDryness,
                firmness: v.firmness,
                flavors: v.flavors,
            };
        });
}
