/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { TypeT, TypeT$ } from "./type";
import { VerboseEffect, VerboseEffect$ } from "./verboseeffect";
import { z } from "zod";

export type EffectEntries = {
    effect?: VerboseEffect | undefined;
    versionGroup?: NamedAPIResource | undefined;
};

export type PastMoveStatValues = {
    /**
     * The percent value of how likely this move is to be successful.
     */
    accuracy: number;
    /**
     * The percent value of effect occurring.
     */
    effectChance?: number | undefined;
    /**
     * The base power of this move with a value of 0 if it does not have a base power.
     */
    power: number;
    /**
     * The power points this move has left.
     */
    pp: number;
    /**
     * The list of previous effects this move has had across version groups.
     */
    effectEntries?: Array<EffectEntries> | undefined;
    type?: TypeT | undefined;
};

/** @internal */
export namespace EffectEntries$ {
    export type Inbound = {
        effect?: VerboseEffect$.Inbound | undefined;
        version_group?: NamedAPIResource$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<EffectEntries, z.ZodTypeDef, Inbound> = z
        .object({
            effect: VerboseEffect$.inboundSchema.optional(),
            version_group: NamedAPIResource$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.effect === undefined ? null : { effect: v.effect }),
                ...(v.version_group === undefined ? null : { versionGroup: v.version_group }),
            };
        });

    export type Outbound = {
        effect?: VerboseEffect$.Outbound | undefined;
        version_group?: NamedAPIResource$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EffectEntries> = z
        .object({
            effect: VerboseEffect$.outboundSchema.optional(),
            versionGroup: NamedAPIResource$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.effect === undefined ? null : { effect: v.effect }),
                ...(v.versionGroup === undefined ? null : { version_group: v.versionGroup }),
            };
        });
}

/** @internal */
export namespace PastMoveStatValues$ {
    export type Inbound = {
        accuracy: number;
        effect_chance?: number | undefined;
        power: number;
        pp: number;
        effect_entries?: Array<EffectEntries$.Inbound> | undefined;
        type?: TypeT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PastMoveStatValues, z.ZodTypeDef, Inbound> = z
        .object({
            accuracy: z.number().int(),
            effect_chance: z.number().int().optional(),
            power: z.number().int(),
            pp: z.number().int(),
            effect_entries: z.array(z.lazy(() => EffectEntries$.inboundSchema)).optional(),
            type: TypeT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                accuracy: v.accuracy,
                ...(v.effect_chance === undefined ? null : { effectChance: v.effect_chance }),
                power: v.power,
                pp: v.pp,
                ...(v.effect_entries === undefined ? null : { effectEntries: v.effect_entries }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        accuracy: number;
        effect_chance?: number | undefined;
        power: number;
        pp: number;
        effect_entries?: Array<EffectEntries$.Outbound> | undefined;
        type?: TypeT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PastMoveStatValues> = z
        .object({
            accuracy: z.number().int(),
            effectChance: z.number().int().optional(),
            power: z.number().int(),
            pp: z.number().int(),
            effectEntries: z.array(z.lazy(() => EffectEntries$.outboundSchema)).optional(),
            type: TypeT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                accuracy: v.accuracy,
                ...(v.effectChance === undefined ? null : { effect_chance: v.effectChance }),
                power: v.power,
                pp: v.pp,
                ...(v.effectEntries === undefined ? null : { effect_entries: v.effectEntries }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
