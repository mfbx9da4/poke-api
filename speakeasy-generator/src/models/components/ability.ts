/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type AbilityGeneration = {
    /**
     * The generation this ability originated in.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for this generation.
     */
    url?: string | undefined;
};

export type AbilityLanguage = {
    /**
     * The name of the language.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for the language.
     */
    url?: string | undefined;
};

export type Names = {
    /**
     * The localized name for an API resource in a specific language.
     */
    name?: string | undefined;
    language?: AbilityLanguage | undefined;
};

export type Ability = {
    /**
     * The identifier for this ability resource.
     */
    id?: number | undefined;
    /**
     * The name for this ability resource.
     */
    name?: string | undefined;
    /**
     * Whether or not this ability originated in the main series of the video games.
     */
    isMainSeries?: boolean | undefined;
    generation?: AbilityGeneration | undefined;
    names?: Array<Names> | undefined;
};

/** @internal */
export namespace AbilityGeneration$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AbilityGeneration, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AbilityGeneration> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace AbilityLanguage$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AbilityLanguage, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AbilityLanguage> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace Names$ {
    export type Inbound = {
        name?: string | undefined;
        language?: AbilityLanguage$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Names, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            language: z.lazy(() => AbilityLanguage$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.language === undefined ? null : { language: v.language }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        language?: AbilityLanguage$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Names> = z
        .object({
            name: z.string().optional(),
            language: z.lazy(() => AbilityLanguage$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.language === undefined ? null : { language: v.language }),
            };
        });
}

/** @internal */
export namespace Ability$ {
    export type Inbound = {
        id?: number | undefined;
        name?: string | undefined;
        is_main_series?: boolean | undefined;
        generation?: AbilityGeneration$.Inbound | undefined;
        names?: Array<Names$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Ability, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            is_main_series: z.boolean().optional(),
            generation: z.lazy(() => AbilityGeneration$.inboundSchema).optional(),
            names: z.array(z.lazy(() => Names$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.is_main_series === undefined ? null : { isMainSeries: v.is_main_series }),
                ...(v.generation === undefined ? null : { generation: v.generation }),
                ...(v.names === undefined ? null : { names: v.names }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        is_main_series?: boolean | undefined;
        generation?: AbilityGeneration$.Outbound | undefined;
        names?: Array<Names$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ability> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            isMainSeries: z.boolean().optional(),
            generation: z.lazy(() => AbilityGeneration$.outboundSchema).optional(),
            names: z.array(z.lazy(() => Names$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.isMainSeries === undefined ? null : { is_main_series: v.isMainSeries }),
                ...(v.generation === undefined ? null : { generation: v.generation }),
                ...(v.names === undefined ? null : { names: v.names }),
            };
        });
}
