/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AbilityEffectChange, AbilityEffectChange$ } from "./abilityeffectchange";
import { ContestComboSets, ContestComboSets$ } from "./contestcombosets";
import { MoveMetaData, MoveMetaData$ } from "./movemetadata";
import { MoveStatChange, MoveStatChange$ } from "./movestatchange";
import { Name, Name$ } from "./name";
import { PastMoveStatValues, PastMoveStatValues$ } from "./pastmovestatvalues";
import { VerboseEffect, VerboseEffect$ } from "./verboseeffect";
import { z } from "zod";

export type MoveContestType = {
    name: string;
    url: string;
};

export type MoveContestEffect = {
    url: string;
};

export type DamageClass = {
    name: string;
    url: string;
};

export type MoveGeneration = {
    name: string;
    url: string;
};

export type MoveSuperContestEffect = {
    url: string;
};

export type Target = {
    name: string;
    url: string;
};

export type MoveType = {
    name: string;
    url: string;
};

export type Move = {
    /**
     * The identifier for this move resource
     */
    id: number;
    /**
     * The name for this move resource
     */
    name: string;
    /**
     * The percent value of how likely this move is to be successful
     */
    accuracy?: number | null | undefined;
    /**
     * The percent value of the additional effects this move has occuring
     */
    effectChance?: number | null | undefined;
    /**
     * Power points. The number of times this move can be used
     */
    pp: number;
    /**
     * A value of 0 means this move goes last in the turn, and 1 means it goes first
     */
    priority: number;
    /**
     * The base power of this move with a value of 0 if it does not have a base power
     */
    power?: number | null | undefined;
    contestCombos?: ContestComboSets | undefined;
    contestType?: MoveContestType | undefined;
    contestEffect?: MoveContestEffect | undefined;
    damageClass?: DamageClass | undefined;
    effectEntries?: Array<VerboseEffect> | undefined;
    effectChanges?: Array<AbilityEffectChange> | undefined;
    generation: MoveGeneration;
    meta?: MoveMetaData | undefined;
    names?: Array<Name> | undefined;
    pastValues?: Array<PastMoveStatValues> | undefined;
    statChanges?: Array<MoveStatChange> | undefined;
    superContestEffect?: MoveSuperContestEffect | undefined;
    target: Target;
    type: MoveType;
};

/** @internal */
export namespace MoveContestType$ {
    export type Inbound = {
        name: string;
        url: string;
    };

    export const inboundSchema: z.ZodType<MoveContestType, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });

    export type Outbound = {
        name: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoveContestType> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });
}

/** @internal */
export namespace MoveContestEffect$ {
    export type Inbound = {
        url: string;
    };

    export const inboundSchema: z.ZodType<MoveContestEffect, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string(),
        })
        .transform((v) => {
            return {
                url: v.url,
            };
        });

    export type Outbound = {
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoveContestEffect> = z
        .object({
            url: z.string(),
        })
        .transform((v) => {
            return {
                url: v.url,
            };
        });
}

/** @internal */
export namespace DamageClass$ {
    export type Inbound = {
        name: string;
        url: string;
    };

    export const inboundSchema: z.ZodType<DamageClass, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });

    export type Outbound = {
        name: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DamageClass> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });
}

/** @internal */
export namespace MoveGeneration$ {
    export type Inbound = {
        name: string;
        url: string;
    };

    export const inboundSchema: z.ZodType<MoveGeneration, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });

    export type Outbound = {
        name: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoveGeneration> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });
}

/** @internal */
export namespace MoveSuperContestEffect$ {
    export type Inbound = {
        url: string;
    };

    export const inboundSchema: z.ZodType<MoveSuperContestEffect, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string(),
        })
        .transform((v) => {
            return {
                url: v.url,
            };
        });

    export type Outbound = {
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoveSuperContestEffect> = z
        .object({
            url: z.string(),
        })
        .transform((v) => {
            return {
                url: v.url,
            };
        });
}

/** @internal */
export namespace Target$ {
    export type Inbound = {
        name: string;
        url: string;
    };

    export const inboundSchema: z.ZodType<Target, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });

    export type Outbound = {
        name: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Target> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });
}

/** @internal */
export namespace MoveType$ {
    export type Inbound = {
        name: string;
        url: string;
    };

    export const inboundSchema: z.ZodType<MoveType, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });

    export type Outbound = {
        name: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoveType> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });
}

/** @internal */
export namespace Move$ {
    export type Inbound = {
        id: number;
        name: string;
        accuracy?: number | null | undefined;
        effect_chance?: number | null | undefined;
        pp: number;
        priority: number;
        power?: number | null | undefined;
        contest_combos?: ContestComboSets$.Inbound | undefined;
        contest_type?: MoveContestType$.Inbound | undefined;
        contest_effect?: MoveContestEffect$.Inbound | undefined;
        damage_class?: DamageClass$.Inbound | undefined;
        effect_entries?: Array<VerboseEffect$.Inbound> | undefined;
        effect_changes?: Array<AbilityEffectChange$.Inbound> | undefined;
        generation: MoveGeneration$.Inbound;
        meta?: MoveMetaData$.Inbound | undefined;
        names?: Array<Name$.Inbound> | undefined;
        past_values?: Array<PastMoveStatValues$.Inbound> | undefined;
        stat_changes?: Array<MoveStatChange$.Inbound> | undefined;
        super_contest_effect?: MoveSuperContestEffect$.Inbound | undefined;
        target: Target$.Inbound;
        type: MoveType$.Inbound;
    };

    export const inboundSchema: z.ZodType<Move, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            accuracy: z.number().int().nullable().optional(),
            effect_chance: z.number().int().nullable().optional(),
            pp: z.number().int(),
            priority: z.number().int(),
            power: z.number().int().nullable().optional(),
            contest_combos: ContestComboSets$.inboundSchema.optional(),
            contest_type: z.lazy(() => MoveContestType$.inboundSchema).optional(),
            contest_effect: z.lazy(() => MoveContestEffect$.inboundSchema).optional(),
            damage_class: z.lazy(() => DamageClass$.inboundSchema).optional(),
            effect_entries: z.array(VerboseEffect$.inboundSchema).optional(),
            effect_changes: z.array(AbilityEffectChange$.inboundSchema).optional(),
            generation: z.lazy(() => MoveGeneration$.inboundSchema),
            meta: MoveMetaData$.inboundSchema.optional(),
            names: z.array(Name$.inboundSchema).optional(),
            past_values: z.array(PastMoveStatValues$.inboundSchema).optional(),
            stat_changes: z.array(MoveStatChange$.inboundSchema).optional(),
            super_contest_effect: z.lazy(() => MoveSuperContestEffect$.inboundSchema).optional(),
            target: z.lazy(() => Target$.inboundSchema),
            type: z.lazy(() => MoveType$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.effect_chance === undefined ? null : { effectChance: v.effect_chance }),
                pp: v.pp,
                priority: v.priority,
                ...(v.power === undefined ? null : { power: v.power }),
                ...(v.contest_combos === undefined ? null : { contestCombos: v.contest_combos }),
                ...(v.contest_type === undefined ? null : { contestType: v.contest_type }),
                ...(v.contest_effect === undefined ? null : { contestEffect: v.contest_effect }),
                ...(v.damage_class === undefined ? null : { damageClass: v.damage_class }),
                ...(v.effect_entries === undefined ? null : { effectEntries: v.effect_entries }),
                ...(v.effect_changes === undefined ? null : { effectChanges: v.effect_changes }),
                generation: v.generation,
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.names === undefined ? null : { names: v.names }),
                ...(v.past_values === undefined ? null : { pastValues: v.past_values }),
                ...(v.stat_changes === undefined ? null : { statChanges: v.stat_changes }),
                ...(v.super_contest_effect === undefined
                    ? null
                    : { superContestEffect: v.super_contest_effect }),
                target: v.target,
                type: v.type,
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        accuracy?: number | null | undefined;
        effect_chance?: number | null | undefined;
        pp: number;
        priority: number;
        power?: number | null | undefined;
        contest_combos?: ContestComboSets$.Outbound | undefined;
        contest_type?: MoveContestType$.Outbound | undefined;
        contest_effect?: MoveContestEffect$.Outbound | undefined;
        damage_class?: DamageClass$.Outbound | undefined;
        effect_entries?: Array<VerboseEffect$.Outbound> | undefined;
        effect_changes?: Array<AbilityEffectChange$.Outbound> | undefined;
        generation: MoveGeneration$.Outbound;
        meta?: MoveMetaData$.Outbound | undefined;
        names?: Array<Name$.Outbound> | undefined;
        past_values?: Array<PastMoveStatValues$.Outbound> | undefined;
        stat_changes?: Array<MoveStatChange$.Outbound> | undefined;
        super_contest_effect?: MoveSuperContestEffect$.Outbound | undefined;
        target: Target$.Outbound;
        type: MoveType$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Move> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            accuracy: z.number().int().nullable().optional(),
            effectChance: z.number().int().nullable().optional(),
            pp: z.number().int(),
            priority: z.number().int(),
            power: z.number().int().nullable().optional(),
            contestCombos: ContestComboSets$.outboundSchema.optional(),
            contestType: z.lazy(() => MoveContestType$.outboundSchema).optional(),
            contestEffect: z.lazy(() => MoveContestEffect$.outboundSchema).optional(),
            damageClass: z.lazy(() => DamageClass$.outboundSchema).optional(),
            effectEntries: z.array(VerboseEffect$.outboundSchema).optional(),
            effectChanges: z.array(AbilityEffectChange$.outboundSchema).optional(),
            generation: z.lazy(() => MoveGeneration$.outboundSchema),
            meta: MoveMetaData$.outboundSchema.optional(),
            names: z.array(Name$.outboundSchema).optional(),
            pastValues: z.array(PastMoveStatValues$.outboundSchema).optional(),
            statChanges: z.array(MoveStatChange$.outboundSchema).optional(),
            superContestEffect: z.lazy(() => MoveSuperContestEffect$.outboundSchema).optional(),
            target: z.lazy(() => Target$.outboundSchema),
            type: z.lazy(() => MoveType$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.effectChance === undefined ? null : { effect_chance: v.effectChance }),
                pp: v.pp,
                priority: v.priority,
                ...(v.power === undefined ? null : { power: v.power }),
                ...(v.contestCombos === undefined ? null : { contest_combos: v.contestCombos }),
                ...(v.contestType === undefined ? null : { contest_type: v.contestType }),
                ...(v.contestEffect === undefined ? null : { contest_effect: v.contestEffect }),
                ...(v.damageClass === undefined ? null : { damage_class: v.damageClass }),
                ...(v.effectEntries === undefined ? null : { effect_entries: v.effectEntries }),
                ...(v.effectChanges === undefined ? null : { effect_changes: v.effectChanges }),
                generation: v.generation,
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.names === undefined ? null : { names: v.names }),
                ...(v.pastValues === undefined ? null : { past_values: v.pastValues }),
                ...(v.statChanges === undefined ? null : { stat_changes: v.statChanges }),
                ...(v.superContestEffect === undefined
                    ? null
                    : { super_contest_effect: v.superContestEffect }),
                target: v.target,
                type: v.type,
            };
        });
}
