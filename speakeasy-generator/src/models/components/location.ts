/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { GenerationGameIndex, GenerationGameIndex$ } from "./generationgameindex";
import { Name, Name$ } from "./name";
import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

export type Location = {
    id?: number | undefined;
    name?: string | undefined;
    region?: NamedAPIResource | undefined;
    names?: Array<Name> | undefined;
    gameIndices?: Array<GenerationGameIndex> | undefined;
    areas?: Array<NamedAPIResource> | undefined;
};

/** @internal */
export namespace Location$ {
    export type Inbound = {
        id?: number | undefined;
        name?: string | undefined;
        region?: NamedAPIResource$.Inbound | undefined;
        names?: Array<Name$.Inbound> | undefined;
        game_indices?: Array<GenerationGameIndex$.Inbound> | undefined;
        areas?: Array<NamedAPIResource$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Location, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            region: NamedAPIResource$.inboundSchema.optional(),
            names: z.array(Name$.inboundSchema).optional(),
            game_indices: z.array(GenerationGameIndex$.inboundSchema).optional(),
            areas: z.array(NamedAPIResource$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.names === undefined ? null : { names: v.names }),
                ...(v.game_indices === undefined ? null : { gameIndices: v.game_indices }),
                ...(v.areas === undefined ? null : { areas: v.areas }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        region?: NamedAPIResource$.Outbound | undefined;
        names?: Array<Name$.Outbound> | undefined;
        game_indices?: Array<GenerationGameIndex$.Outbound> | undefined;
        areas?: Array<NamedAPIResource$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Location> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            region: NamedAPIResource$.outboundSchema.optional(),
            names: z.array(Name$.outboundSchema).optional(),
            gameIndices: z.array(GenerationGameIndex$.outboundSchema).optional(),
            areas: z.array(NamedAPIResource$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.names === undefined ? null : { names: v.names }),
                ...(v.gameIndices === undefined ? null : { game_indices: v.gameIndices }),
                ...(v.areas === undefined ? null : { areas: v.areas }),
            };
        });
}
