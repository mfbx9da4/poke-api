/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Language, Language$ } from "./language";
import { z } from "zod";

export type Genus = {
    genus?: string | undefined;
    language?: Language | undefined;
};

/** @internal */
export namespace Genus$ {
    export type Inbound = {
        genus?: string | undefined;
        language?: Language$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Genus, z.ZodTypeDef, Inbound> = z
        .object({
            genus: z.string().optional(),
            language: Language$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.genus === undefined ? null : { genus: v.genus }),
                ...(v.language === undefined ? null : { language: v.language }),
            };
        });

    export type Outbound = {
        genus?: string | undefined;
        language?: Language$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Genus> = z
        .object({
            genus: z.string().optional(),
            language: Language$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.genus === undefined ? null : { genus: v.genus }),
                ...(v.language === undefined ? null : { language: v.language }),
            };
        });
}
