/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type DoubleDamageFrom = {
    /**
     * The name of the related type.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for the related type.
     */
    url?: string | undefined;
};

export type DoubleDamageTo = {
    /**
     * The name of the related type.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for the related type.
     */
    url?: string | undefined;
};

export type HalfDamageFrom = {
    /**
     * The name of the related type.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for the related type.
     */
    url?: string | undefined;
};

export type HalfDamageTo = {
    /**
     * The name of the related type.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for the related type.
     */
    url?: string | undefined;
};

export type NoDamageFrom = {
    /**
     * The name of the related type.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for the related type.
     */
    url?: string | undefined;
};

export type NoDamageTo = {
    /**
     * The name of the related type.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for the related type.
     */
    url?: string | undefined;
};

export type DamageRelations = {
    doubleDamageFrom?: Array<DoubleDamageFrom> | undefined;
    doubleDamageTo?: Array<DoubleDamageTo> | undefined;
    halfDamageFrom?: Array<HalfDamageFrom> | undefined;
    halfDamageTo?: Array<HalfDamageTo> | undefined;
    noDamageFrom?: Array<NoDamageFrom> | undefined;
    noDamageTo?: Array<NoDamageTo> | undefined;
};

export type TypeGameIndicesGeneration = {
    /**
     * The generation this game index is related to.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for the generation.
     */
    url?: string | undefined;
};

export type GameIndices = {
    /**
     * The internal id of an api resource within game data.
     */
    gameIndex?: number | undefined;
    generation?: TypeGameIndicesGeneration | undefined;
};

export type TypeGeneration = {
    /**
     * The generation this type originated in.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for this generation.
     */
    url?: string | undefined;
};

export type TypeMoveDamageClass = {
    /**
     * The name of this move damage class.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for this move damage class.
     */
    url?: string | undefined;
};

export type TypeLanguage = {
    /**
     * The name of the language.
     */
    name?: string | undefined;
    /**
     * The URL of the API endpoint for the language.
     */
    url?: string | undefined;
};

export type TypeNames = {
    /**
     * The localized name for an API resource in a specific language.
     */
    name?: string | undefined;
    language?: TypeLanguage | undefined;
};

export type TypePokemon = {
    slot?: number | undefined;
};

export type TypeT = {
    /**
     * The identifier for this type resource.
     */
    id?: number | undefined;
    /**
     * The name for this type resource.
     */
    name?: string | undefined;
    damageRelations?: DamageRelations | undefined;
    gameIndices?: Array<GameIndices> | undefined;
    generation?: TypeGeneration | undefined;
    moveDamageClass?: TypeMoveDamageClass | undefined;
    names?: Array<TypeNames> | undefined;
    pokemon?: Array<TypePokemon> | undefined;
};

/** @internal */
export namespace DoubleDamageFrom$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DoubleDamageFrom, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DoubleDamageFrom> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace DoubleDamageTo$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DoubleDamageTo, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DoubleDamageTo> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace HalfDamageFrom$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<HalfDamageFrom, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HalfDamageFrom> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace HalfDamageTo$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<HalfDamageTo, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HalfDamageTo> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace NoDamageFrom$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<NoDamageFrom, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NoDamageFrom> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace NoDamageTo$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<NoDamageTo, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NoDamageTo> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace DamageRelations$ {
    export type Inbound = {
        double_damage_from?: Array<DoubleDamageFrom$.Inbound> | undefined;
        double_damage_to?: Array<DoubleDamageTo$.Inbound> | undefined;
        half_damage_from?: Array<HalfDamageFrom$.Inbound> | undefined;
        half_damage_to?: Array<HalfDamageTo$.Inbound> | undefined;
        no_damage_from?: Array<NoDamageFrom$.Inbound> | undefined;
        no_damage_to?: Array<NoDamageTo$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<DamageRelations, z.ZodTypeDef, Inbound> = z
        .object({
            double_damage_from: z.array(z.lazy(() => DoubleDamageFrom$.inboundSchema)).optional(),
            double_damage_to: z.array(z.lazy(() => DoubleDamageTo$.inboundSchema)).optional(),
            half_damage_from: z.array(z.lazy(() => HalfDamageFrom$.inboundSchema)).optional(),
            half_damage_to: z.array(z.lazy(() => HalfDamageTo$.inboundSchema)).optional(),
            no_damage_from: z.array(z.lazy(() => NoDamageFrom$.inboundSchema)).optional(),
            no_damage_to: z.array(z.lazy(() => NoDamageTo$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.double_damage_from === undefined
                    ? null
                    : { doubleDamageFrom: v.double_damage_from }),
                ...(v.double_damage_to === undefined
                    ? null
                    : { doubleDamageTo: v.double_damage_to }),
                ...(v.half_damage_from === undefined
                    ? null
                    : { halfDamageFrom: v.half_damage_from }),
                ...(v.half_damage_to === undefined ? null : { halfDamageTo: v.half_damage_to }),
                ...(v.no_damage_from === undefined ? null : { noDamageFrom: v.no_damage_from }),
                ...(v.no_damage_to === undefined ? null : { noDamageTo: v.no_damage_to }),
            };
        });

    export type Outbound = {
        double_damage_from?: Array<DoubleDamageFrom$.Outbound> | undefined;
        double_damage_to?: Array<DoubleDamageTo$.Outbound> | undefined;
        half_damage_from?: Array<HalfDamageFrom$.Outbound> | undefined;
        half_damage_to?: Array<HalfDamageTo$.Outbound> | undefined;
        no_damage_from?: Array<NoDamageFrom$.Outbound> | undefined;
        no_damage_to?: Array<NoDamageTo$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DamageRelations> = z
        .object({
            doubleDamageFrom: z.array(z.lazy(() => DoubleDamageFrom$.outboundSchema)).optional(),
            doubleDamageTo: z.array(z.lazy(() => DoubleDamageTo$.outboundSchema)).optional(),
            halfDamageFrom: z.array(z.lazy(() => HalfDamageFrom$.outboundSchema)).optional(),
            halfDamageTo: z.array(z.lazy(() => HalfDamageTo$.outboundSchema)).optional(),
            noDamageFrom: z.array(z.lazy(() => NoDamageFrom$.outboundSchema)).optional(),
            noDamageTo: z.array(z.lazy(() => NoDamageTo$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.doubleDamageFrom === undefined
                    ? null
                    : { double_damage_from: v.doubleDamageFrom }),
                ...(v.doubleDamageTo === undefined ? null : { double_damage_to: v.doubleDamageTo }),
                ...(v.halfDamageFrom === undefined ? null : { half_damage_from: v.halfDamageFrom }),
                ...(v.halfDamageTo === undefined ? null : { half_damage_to: v.halfDamageTo }),
                ...(v.noDamageFrom === undefined ? null : { no_damage_from: v.noDamageFrom }),
                ...(v.noDamageTo === undefined ? null : { no_damage_to: v.noDamageTo }),
            };
        });
}

/** @internal */
export namespace TypeGameIndicesGeneration$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TypeGameIndicesGeneration, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypeGameIndicesGeneration> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace GameIndices$ {
    export type Inbound = {
        game_index?: number | undefined;
        generation?: TypeGameIndicesGeneration$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GameIndices, z.ZodTypeDef, Inbound> = z
        .object({
            game_index: z.number().int().optional(),
            generation: z.lazy(() => TypeGameIndicesGeneration$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.game_index === undefined ? null : { gameIndex: v.game_index }),
                ...(v.generation === undefined ? null : { generation: v.generation }),
            };
        });

    export type Outbound = {
        game_index?: number | undefined;
        generation?: TypeGameIndicesGeneration$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GameIndices> = z
        .object({
            gameIndex: z.number().int().optional(),
            generation: z.lazy(() => TypeGameIndicesGeneration$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.gameIndex === undefined ? null : { game_index: v.gameIndex }),
                ...(v.generation === undefined ? null : { generation: v.generation }),
            };
        });
}

/** @internal */
export namespace TypeGeneration$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TypeGeneration, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypeGeneration> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace TypeMoveDamageClass$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TypeMoveDamageClass, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypeMoveDamageClass> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace TypeLanguage$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TypeLanguage, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypeLanguage> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace TypeNames$ {
    export type Inbound = {
        name?: string | undefined;
        language?: TypeLanguage$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TypeNames, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            language: z.lazy(() => TypeLanguage$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.language === undefined ? null : { language: v.language }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        language?: TypeLanguage$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypeNames> = z
        .object({
            name: z.string().optional(),
            language: z.lazy(() => TypeLanguage$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.language === undefined ? null : { language: v.language }),
            };
        });
}

/** @internal */
export namespace TypePokemon$ {
    export type Inbound = {
        slot?: number | undefined;
    };

    export const inboundSchema: z.ZodType<TypePokemon, z.ZodTypeDef, Inbound> = z
        .object({
            slot: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.slot === undefined ? null : { slot: v.slot }),
            };
        });

    export type Outbound = {
        slot?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypePokemon> = z
        .object({
            slot: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.slot === undefined ? null : { slot: v.slot }),
            };
        });
}

/** @internal */
export namespace TypeT$ {
    export type Inbound = {
        id?: number | undefined;
        name?: string | undefined;
        damage_relations?: DamageRelations$.Inbound | undefined;
        game_indices?: Array<GameIndices$.Inbound> | undefined;
        generation?: TypeGeneration$.Inbound | undefined;
        move_damage_class?: TypeMoveDamageClass$.Inbound | undefined;
        names?: Array<TypeNames$.Inbound> | undefined;
        pokemon?: Array<TypePokemon$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<TypeT, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            damage_relations: z.lazy(() => DamageRelations$.inboundSchema).optional(),
            game_indices: z.array(z.lazy(() => GameIndices$.inboundSchema)).optional(),
            generation: z.lazy(() => TypeGeneration$.inboundSchema).optional(),
            move_damage_class: z.lazy(() => TypeMoveDamageClass$.inboundSchema).optional(),
            names: z.array(z.lazy(() => TypeNames$.inboundSchema)).optional(),
            pokemon: z.array(z.lazy(() => TypePokemon$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.damage_relations === undefined
                    ? null
                    : { damageRelations: v.damage_relations }),
                ...(v.game_indices === undefined ? null : { gameIndices: v.game_indices }),
                ...(v.generation === undefined ? null : { generation: v.generation }),
                ...(v.move_damage_class === undefined
                    ? null
                    : { moveDamageClass: v.move_damage_class }),
                ...(v.names === undefined ? null : { names: v.names }),
                ...(v.pokemon === undefined ? null : { pokemon: v.pokemon }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        damage_relations?: DamageRelations$.Outbound | undefined;
        game_indices?: Array<GameIndices$.Outbound> | undefined;
        generation?: TypeGeneration$.Outbound | undefined;
        move_damage_class?: TypeMoveDamageClass$.Outbound | undefined;
        names?: Array<TypeNames$.Outbound> | undefined;
        pokemon?: Array<TypePokemon$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypeT> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            damageRelations: z.lazy(() => DamageRelations$.outboundSchema).optional(),
            gameIndices: z.array(z.lazy(() => GameIndices$.outboundSchema)).optional(),
            generation: z.lazy(() => TypeGeneration$.outboundSchema).optional(),
            moveDamageClass: z.lazy(() => TypeMoveDamageClass$.outboundSchema).optional(),
            names: z.array(z.lazy(() => TypeNames$.outboundSchema)).optional(),
            pokemon: z.array(z.lazy(() => TypePokemon$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.damageRelations === undefined
                    ? null
                    : { damage_relations: v.damageRelations }),
                ...(v.gameIndices === undefined ? null : { game_indices: v.gameIndices }),
                ...(v.generation === undefined ? null : { generation: v.generation }),
                ...(v.moveDamageClass === undefined
                    ? null
                    : { move_damage_class: v.moveDamageClass }),
                ...(v.names === undefined ? null : { names: v.names }),
                ...(v.pokemon === undefined ? null : { pokemon: v.pokemon }),
            };
        });
}
