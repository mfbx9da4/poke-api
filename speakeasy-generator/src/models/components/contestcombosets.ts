/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ContestComboDetail, ContestComboDetail$ } from "./contestcombodetail";
import { z } from "zod";

export type ContestComboSets = {
    normal?: ContestComboDetail | undefined;
    super?: ContestComboDetail | undefined;
};

/** @internal */
export namespace ContestComboSets$ {
    export type Inbound = {
        normal?: ContestComboDetail$.Inbound | undefined;
        super?: ContestComboDetail$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ContestComboSets, z.ZodTypeDef, Inbound> = z
        .object({
            normal: ContestComboDetail$.inboundSchema.optional(),
            super: ContestComboDetail$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.normal === undefined ? null : { normal: v.normal }),
                ...(v.super === undefined ? null : { super: v.super }),
            };
        });

    export type Outbound = {
        normal?: ContestComboDetail$.Outbound | undefined;
        super?: ContestComboDetail$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContestComboSets> = z
        .object({
            normal: ContestComboDetail$.outboundSchema.optional(),
            super: ContestComboDetail$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.normal === undefined ? null : { normal: v.normal }),
                ...(v.super === undefined ? null : { super: v.super }),
            };
        });
}
