/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Name, Name$ } from "./name";
import { z } from "zod";

export type Language = {
    id?: number | undefined;
    name?: string | undefined;
    official?: boolean | undefined;
    iso639?: string | undefined;
    iso3166?: string | undefined;
    names?: Array<Name> | undefined;
};

/** @internal */
export namespace Language$ {
    export type Inbound = {
        id?: number | undefined;
        name?: string | undefined;
        official?: boolean | undefined;
        iso639?: string | undefined;
        iso3166?: string | undefined;
        names?: Array<Name$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Language, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            official: z.boolean().optional(),
            iso639: z.string().optional(),
            iso3166: z.string().optional(),
            names: z.array(Name$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.official === undefined ? null : { official: v.official }),
                ...(v.iso639 === undefined ? null : { iso639: v.iso639 }),
                ...(v.iso3166 === undefined ? null : { iso3166: v.iso3166 }),
                ...(v.names === undefined ? null : { names: v.names }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        official?: boolean | undefined;
        iso639?: string | undefined;
        iso3166?: string | undefined;
        names?: Array<Name$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Language> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            official: z.boolean().optional(),
            iso639: z.string().optional(),
            iso3166: z.string().optional(),
            names: z.array(Name$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.official === undefined ? null : { official: v.official }),
                ...(v.iso639 === undefined ? null : { iso639: v.iso639 }),
                ...(v.iso3166 === undefined ? null : { iso3166: v.iso3166 }),
                ...(v.names === undefined ? null : { names: v.names }),
            };
        });
}
