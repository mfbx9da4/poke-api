/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

export type Machine = {
    id?: number | undefined;
    item?: NamedAPIResource | undefined;
    move?: NamedAPIResource | undefined;
    versionGroup?: NamedAPIResource | undefined;
};

/** @internal */
export namespace Machine$ {
    export type Inbound = {
        id?: number | undefined;
        item?: NamedAPIResource$.Inbound | undefined;
        move?: NamedAPIResource$.Inbound | undefined;
        version_group?: NamedAPIResource$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Machine, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int().optional(),
            item: NamedAPIResource$.inboundSchema.optional(),
            move: NamedAPIResource$.inboundSchema.optional(),
            version_group: NamedAPIResource$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.item === undefined ? null : { item: v.item }),
                ...(v.move === undefined ? null : { move: v.move }),
                ...(v.version_group === undefined ? null : { versionGroup: v.version_group }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        item?: NamedAPIResource$.Outbound | undefined;
        move?: NamedAPIResource$.Outbound | undefined;
        version_group?: NamedAPIResource$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Machine> = z
        .object({
            id: z.number().int().optional(),
            item: NamedAPIResource$.outboundSchema.optional(),
            move: NamedAPIResource$.outboundSchema.optional(),
            versionGroup: NamedAPIResource$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.item === undefined ? null : { item: v.item }),
                ...(v.move === undefined ? null : { move: v.move }),
                ...(v.versionGroup === undefined ? null : { version_group: v.versionGroup }),
            };
        });
}
