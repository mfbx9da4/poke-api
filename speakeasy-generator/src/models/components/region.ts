/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Name, Name$ } from "./name";
import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

export type Region = {
    id: number;
    locations: Array<NamedAPIResource>;
    name: string;
    names: Array<Name>;
    mainGeneration: NamedAPIResource;
    pokedexes: Array<NamedAPIResource>;
    versionGroups: Array<NamedAPIResource>;
};

/** @internal */
export namespace Region$ {
    export type Inbound = {
        id: number;
        locations: Array<NamedAPIResource$.Inbound>;
        name: string;
        names: Array<Name$.Inbound>;
        main_generation: NamedAPIResource$.Inbound;
        pokedexes: Array<NamedAPIResource$.Inbound>;
        version_groups: Array<NamedAPIResource$.Inbound>;
    };

    export const inboundSchema: z.ZodType<Region, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            locations: z.array(NamedAPIResource$.inboundSchema),
            name: z.string(),
            names: z.array(Name$.inboundSchema),
            main_generation: NamedAPIResource$.inboundSchema,
            pokedexes: z.array(NamedAPIResource$.inboundSchema),
            version_groups: z.array(NamedAPIResource$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                locations: v.locations,
                name: v.name,
                names: v.names,
                mainGeneration: v.main_generation,
                pokedexes: v.pokedexes,
                versionGroups: v.version_groups,
            };
        });

    export type Outbound = {
        id: number;
        locations: Array<NamedAPIResource$.Outbound>;
        name: string;
        names: Array<Name$.Outbound>;
        main_generation: NamedAPIResource$.Outbound;
        pokedexes: Array<NamedAPIResource$.Outbound>;
        version_groups: Array<NamedAPIResource$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Region> = z
        .object({
            id: z.number().int(),
            locations: z.array(NamedAPIResource$.outboundSchema),
            name: z.string(),
            names: z.array(Name$.outboundSchema),
            mainGeneration: NamedAPIResource$.outboundSchema,
            pokedexes: z.array(NamedAPIResource$.outboundSchema),
            versionGroups: z.array(NamedAPIResource$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                locations: v.locations,
                name: v.name,
                names: v.names,
                main_generation: v.mainGeneration,
                pokedexes: v.pokedexes,
                version_groups: v.versionGroups,
            };
        });
}
