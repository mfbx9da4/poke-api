/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FlavorText, FlavorText$ } from "./flavortext";
import { VerboseEffect, VerboseEffect$ } from "./verboseeffect";
import { z } from "zod";

export type ContestEffect = {
    /**
     * The identifier for this contest effect resource
     */
    id: number;
    /**
     * The base number of hearts the user of this move gets
     */
    appeal: number;
    /**
     * The base number of hearts the user's opponent loses
     */
    jam: number;
    /**
     * The flavor text of this contest effect listed in different languages
     */
    effectEntries: Array<VerboseEffect>;
    /**
     * The flavor text of this contest effect listed in different languages
     */
    flavorTextEntries: Array<FlavorText>;
};

/** @internal */
export namespace ContestEffect$ {
    export type Inbound = {
        id: number;
        appeal: number;
        jam: number;
        effect_entries: Array<VerboseEffect$.Inbound>;
        flavor_text_entries: Array<FlavorText$.Inbound>;
    };

    export const inboundSchema: z.ZodType<ContestEffect, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            appeal: z.number().int(),
            jam: z.number().int(),
            effect_entries: z.array(VerboseEffect$.inboundSchema),
            flavor_text_entries: z.array(FlavorText$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                appeal: v.appeal,
                jam: v.jam,
                effectEntries: v.effect_entries,
                flavorTextEntries: v.flavor_text_entries,
            };
        });

    export type Outbound = {
        id: number;
        appeal: number;
        jam: number;
        effect_entries: Array<VerboseEffect$.Outbound>;
        flavor_text_entries: Array<FlavorText$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContestEffect> = z
        .object({
            id: z.number().int(),
            appeal: z.number().int(),
            jam: z.number().int(),
            effectEntries: z.array(VerboseEffect$.outboundSchema),
            flavorTextEntries: z.array(FlavorText$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                appeal: v.appeal,
                jam: v.jam,
                effect_entries: v.effectEntries,
                flavor_text_entries: v.flavorTextEntries,
            };
        });
}
