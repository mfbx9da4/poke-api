/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EncounterConditionValue, EncounterConditionValue$ } from "./encounterconditionvalue";
import { EncounterMethod, EncounterMethod$ } from "./encountermethod";
import { z } from "zod";

export type Encounter = {
    /**
     * The lowest level the Pokémon could be encountered at.
     */
    minLevel: number;
    /**
     * The highest level the Pokémon could be encountered at.
     */
    maxLevel: number;
    /**
     * The condition which triggers this encounter.
     */
    conditionValues?: Array<EncounterConditionValue> | undefined;
    /**
     * Percent chance that this encounter will occur.
     */
    chance?: number | undefined;
    method: EncounterMethod;
};

/** @internal */
export namespace Encounter$ {
    export type Inbound = {
        min_level: number;
        max_level: number;
        condition_values?: Array<EncounterConditionValue$.Inbound> | undefined;
        chance?: number | undefined;
        method: EncounterMethod$.Inbound;
    };

    export const inboundSchema: z.ZodType<Encounter, z.ZodTypeDef, Inbound> = z
        .object({
            min_level: z.number().int(),
            max_level: z.number().int(),
            condition_values: z.array(EncounterConditionValue$.inboundSchema).optional(),
            chance: z.number().int().optional(),
            method: EncounterMethod$.inboundSchema,
        })
        .transform((v) => {
            return {
                minLevel: v.min_level,
                maxLevel: v.max_level,
                ...(v.condition_values === undefined
                    ? null
                    : { conditionValues: v.condition_values }),
                ...(v.chance === undefined ? null : { chance: v.chance }),
                method: v.method,
            };
        });

    export type Outbound = {
        min_level: number;
        max_level: number;
        condition_values?: Array<EncounterConditionValue$.Outbound> | undefined;
        chance?: number | undefined;
        method: EncounterMethod$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Encounter> = z
        .object({
            minLevel: z.number().int(),
            maxLevel: z.number().int(),
            conditionValues: z.array(EncounterConditionValue$.outboundSchema).optional(),
            chance: z.number().int().optional(),
            method: EncounterMethod$.outboundSchema,
        })
        .transform((v) => {
            return {
                min_level: v.minLevel,
                max_level: v.maxLevel,
                ...(v.conditionValues === undefined
                    ? null
                    : { condition_values: v.conditionValues }),
                ...(v.chance === undefined ? null : { chance: v.chance }),
                method: v.method,
            };
        });
}
