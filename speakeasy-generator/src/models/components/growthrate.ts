/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Description, Description$ } from "./description";
import { z } from "zod";

export type GrowthRate = {
    /**
     * The identifier for this growth rate resource
     */
    id?: number | undefined;
    /**
     * The name for this growth rate resource
     */
    name?: string | undefined;
    /**
     * The formula used to calculate the rate at which the Pok√©mon species gains level
     */
    formula?: string | undefined;
    /**
     * The description of this growth rate listed in different languages
     */
    descriptions?: Array<Description> | undefined;
};

/** @internal */
export namespace GrowthRate$ {
    export type Inbound = {
        id?: number | undefined;
        name?: string | undefined;
        formula?: string | undefined;
        descriptions?: Array<Description$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GrowthRate, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            formula: z.string().optional(),
            descriptions: z.array(Description$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.formula === undefined ? null : { formula: v.formula }),
                ...(v.descriptions === undefined ? null : { descriptions: v.descriptions }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        formula?: string | undefined;
        descriptions?: Array<Description$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GrowthRate> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            formula: z.string().optional(),
            descriptions: z.array(Description$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.formula === undefined ? null : { formula: v.formula }),
                ...(v.descriptions === undefined ? null : { descriptions: v.descriptions }),
            };
        });
}
