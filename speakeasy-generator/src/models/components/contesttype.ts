/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { BerryFlavor, BerryFlavor$ } from "./berryflavor";
import { ContestName, ContestName$ } from "./contestname";
import { z } from "zod";

export type ContestType = {
    /**
     * The identifier for this contest type resource
     */
    id: number;
    /**
     * The name for this contest type resource
     */
    name: string;
    berryFlavor: BerryFlavor;
    /**
     * The name of this contest type listed in different languages
     */
    names: Array<ContestName>;
};

/** @internal */
export namespace ContestType$ {
    export type Inbound = {
        id: number;
        name: string;
        berry_flavor: BerryFlavor$.Inbound;
        names: Array<ContestName$.Inbound>;
    };

    export const inboundSchema: z.ZodType<ContestType, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            berry_flavor: BerryFlavor$.inboundSchema,
            names: z.array(ContestName$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                berryFlavor: v.berry_flavor,
                names: v.names,
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        berry_flavor: BerryFlavor$.Outbound;
        names: Array<ContestName$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContestType> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            berryFlavor: BerryFlavor$.outboundSchema,
            names: z.array(ContestName$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                berry_flavor: v.berryFlavor,
                names: v.names,
            };
        });
}
