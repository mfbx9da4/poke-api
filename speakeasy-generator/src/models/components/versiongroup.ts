/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

export type VersionGroup = {
    id: number;
    name: string;
    order: number;
    generation: NamedAPIResource;
    moveLearnMethods: Array<NamedAPIResource>;
    pokedexes: Array<NamedAPIResource>;
    regions: Array<NamedAPIResource>;
    versions: Array<NamedAPIResource>;
};

/** @internal */
export namespace VersionGroup$ {
    export type Inbound = {
        id: number;
        name: string;
        order: number;
        generation: NamedAPIResource$.Inbound;
        move_learn_methods: Array<NamedAPIResource$.Inbound>;
        pokedexes: Array<NamedAPIResource$.Inbound>;
        regions: Array<NamedAPIResource$.Inbound>;
        versions: Array<NamedAPIResource$.Inbound>;
    };

    export const inboundSchema: z.ZodType<VersionGroup, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            order: z.number().int(),
            generation: NamedAPIResource$.inboundSchema,
            move_learn_methods: z.array(NamedAPIResource$.inboundSchema),
            pokedexes: z.array(NamedAPIResource$.inboundSchema),
            regions: z.array(NamedAPIResource$.inboundSchema),
            versions: z.array(NamedAPIResource$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                order: v.order,
                generation: v.generation,
                moveLearnMethods: v.move_learn_methods,
                pokedexes: v.pokedexes,
                regions: v.regions,
                versions: v.versions,
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        order: number;
        generation: NamedAPIResource$.Outbound;
        move_learn_methods: Array<NamedAPIResource$.Outbound>;
        pokedexes: Array<NamedAPIResource$.Outbound>;
        regions: Array<NamedAPIResource$.Outbound>;
        versions: Array<NamedAPIResource$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VersionGroup> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            order: z.number().int(),
            generation: NamedAPIResource$.outboundSchema,
            moveLearnMethods: z.array(NamedAPIResource$.outboundSchema),
            pokedexes: z.array(NamedAPIResource$.outboundSchema),
            regions: z.array(NamedAPIResource$.outboundSchema),
            versions: z.array(NamedAPIResource$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                order: v.order,
                generation: v.generation,
                move_learn_methods: v.moveLearnMethods,
                pokedexes: v.pokedexes,
                regions: v.regions,
                versions: v.versions,
            };
        });
}
