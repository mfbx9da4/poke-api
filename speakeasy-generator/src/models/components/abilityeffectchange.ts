/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Effect, Effect$ } from "./effect";
import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

export type AbilityEffectChange = {
    effectEntries: Array<Effect>;
    versionGroup: NamedAPIResource;
};

/** @internal */
export namespace AbilityEffectChange$ {
    export type Inbound = {
        effect_entries: Array<Effect$.Inbound>;
        version_group: NamedAPIResource$.Inbound;
    };

    export const inboundSchema: z.ZodType<AbilityEffectChange, z.ZodTypeDef, Inbound> = z
        .object({
            effect_entries: z.array(Effect$.inboundSchema),
            version_group: NamedAPIResource$.inboundSchema,
        })
        .transform((v) => {
            return {
                effectEntries: v.effect_entries,
                versionGroup: v.version_group,
            };
        });

    export type Outbound = {
        effect_entries: Array<Effect$.Outbound>;
        version_group: NamedAPIResource$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AbilityEffectChange> = z
        .object({
            effectEntries: z.array(Effect$.outboundSchema),
            versionGroup: NamedAPIResource$.outboundSchema,
        })
        .transform((v) => {
            return {
                effect_entries: v.effectEntries,
                version_group: v.versionGroup,
            };
        });
}
