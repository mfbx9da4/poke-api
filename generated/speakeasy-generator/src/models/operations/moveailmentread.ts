/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type MoveAilmentReadRequest = {
    id: number;
};

export type MoveAilmentReadResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    moveAilment?: components.MoveAilment | undefined;
};

/** @internal */
export namespace MoveAilmentReadRequest$ {
    export type Inbound = {
        id: number;
    };

    export const inboundSchema: z.ZodType<MoveAilmentReadRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoveAilmentReadRequest> = z
        .object({
            id: z.number().int(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace MoveAilmentReadResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        MoveAilment?: components.MoveAilment$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<MoveAilmentReadResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            MoveAilment: components.MoveAilment$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.MoveAilment === undefined ? null : { moveAilment: v.MoveAilment }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        MoveAilment?: components.MoveAilment$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoveAilmentReadResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            moveAilment: components.MoveAilment$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.moveAilment === undefined ? null : { MoveAilment: v.moveAilment }),
            };
        });
}
