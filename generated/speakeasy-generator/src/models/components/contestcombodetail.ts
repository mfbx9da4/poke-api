/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Move, Move$ } from "./move";
import { z } from "zod";

export type ContestComboDetail = {
    /**
     * A list of moves to use before this move.
     */
    useBefore?: Array<Move> | undefined;
    /**
     * A list of moves to use after this move.
     */
    useAfter?: Array<Move> | undefined;
};

/** @internal */
export namespace ContestComboDetail$ {
    export type Inbound = {
        use_before?: Array<Move$.Inbound> | undefined;
        use_after?: Array<Move$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ContestComboDetail, z.ZodTypeDef, Inbound> = z
        .object({
            use_before: z.array(Move$.inboundSchema).optional(),
            use_after: z.array(Move$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.use_before === undefined ? null : { useBefore: v.use_before }),
                ...(v.use_after === undefined ? null : { useAfter: v.use_after }),
            };
        });

    export type Outbound = {
        use_before?: Array<Move$.Outbound> | undefined;
        use_after?: Array<Move$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContestComboDetail> = z
        .object({
            useBefore: z.array(Move$.outboundSchema).optional(),
            useAfter: z.array(Move$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.useBefore === undefined ? null : { use_before: v.useBefore }),
                ...(v.useAfter === undefined ? null : { use_after: v.useAfter }),
            };
        });
}
