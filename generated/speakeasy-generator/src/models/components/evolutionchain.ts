/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EvolutionTrigger, EvolutionTrigger$ } from "./evolutiontrigger";
import { PokemonSpecies, PokemonSpecies$ } from "./pokemonspecies";
import { z } from "zod";

/**
 * The required time of day. Day or night.
 */
export enum TimeOfDay {
    Day = "day",
    Night = "night",
}

export type EvolutionDetails = {
    item?: any | undefined;
    trigger?: EvolutionTrigger | undefined;
    /**
     * The required female gender of the evolving Pokémon species. Must be either 1 or 2, or null if the Pokémon species has no gender or the gender is fixed.
     */
    gender?: number | null | undefined;
    heldItem?: any | undefined;
    knownMove?: any | undefined;
    knownMoveType?: any | undefined;
    location?: any | undefined;
    /**
     * The minimum required level of the evolving Pokémon species
     */
    minLevel?: number | null | undefined;
    /**
     * The minimum required happiness of the evolving Pokémon species
     */
    minHappiness?: number | null | undefined;
    /**
     * The minimum required beauty of the evolving Pokémon species
     */
    minBeauty?: number | null | undefined;
    /**
     * The minimum required affection of the evolving Pokémon species
     */
    minAffection?: number | null | undefined;
    /**
     * Whether or not it must be raining in the overworld to evolve into this Pokémon species
     */
    needsOverworldRain?: boolean | undefined;
    partySpecies?: any | undefined;
    partyType?: any | undefined;
    /**
     * The required relation between the Pokémon's Attack and Defense stats. 1 means Attack > Defense, 0 means Attack = Defense, and -1 means Attack < Defense.
     */
    relativePhysicalStats?: number | null | undefined;
    /**
     * The required time of day. Day or night.
     */
    timeOfDay?: TimeOfDay | undefined;
    tradeSpecies?: any | undefined;
    /**
     * Whether or not the 3DS needs to be turned upside-down as this Pokémon levels up.
     */
    turnUpsideDown?: boolean | undefined;
};

export type Chain = {
    /**
     * Whether or not this is a baby Pokémon
     */
    isBaby?: boolean | undefined;
    species?: PokemonSpecies | undefined;
    /**
     * The chain of Pokémon species that forms part of this evolution chain
     */
    evolutionDetails?: Array<EvolutionDetails> | null | undefined;
};

export type EvolutionChain = {
    /**
     * The identifier for this evolution chain resource
     */
    id: number;
    /**
     * The item that a baby Pokémon would be holding when born during a forced evolution
     */
    babyTriggerItem?: any | null | undefined;
    chain: Chain;
};

/** @internal */
export const TimeOfDay$ = z.nativeEnum(TimeOfDay);

/** @internal */
export namespace EvolutionDetails$ {
    export type Inbound = {
        item?: any | undefined;
        trigger?: EvolutionTrigger$.Inbound | undefined;
        gender?: number | null | undefined;
        held_item?: any | undefined;
        known_move?: any | undefined;
        known_move_type?: any | undefined;
        location?: any | undefined;
        min_level?: number | null | undefined;
        min_happiness?: number | null | undefined;
        min_beauty?: number | null | undefined;
        min_affection?: number | null | undefined;
        needs_overworld_rain?: boolean | undefined;
        party_species?: any | undefined;
        party_type?: any | undefined;
        relative_physical_stats?: number | null | undefined;
        time_of_day?: TimeOfDay | undefined;
        trade_species?: any | undefined;
        turn_upside_down?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<EvolutionDetails, z.ZodTypeDef, Inbound> = z
        .object({
            item: z.any().optional(),
            trigger: EvolutionTrigger$.inboundSchema.optional(),
            gender: z.number().int().nullable().optional(),
            held_item: z.any().optional(),
            known_move: z.any().optional(),
            known_move_type: z.any().optional(),
            location: z.any().optional(),
            min_level: z.number().int().nullable().optional(),
            min_happiness: z.number().int().nullable().optional(),
            min_beauty: z.number().int().nullable().optional(),
            min_affection: z.number().int().nullable().optional(),
            needs_overworld_rain: z.boolean().optional(),
            party_species: z.any().optional(),
            party_type: z.any().optional(),
            relative_physical_stats: z.number().int().nullable().optional(),
            time_of_day: TimeOfDay$.optional(),
            trade_species: z.any().optional(),
            turn_upside_down: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.item === undefined ? null : { item: v.item }),
                ...(v.trigger === undefined ? null : { trigger: v.trigger }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.held_item === undefined ? null : { heldItem: v.held_item }),
                ...(v.known_move === undefined ? null : { knownMove: v.known_move }),
                ...(v.known_move_type === undefined ? null : { knownMoveType: v.known_move_type }),
                ...(v.location === undefined ? null : { location: v.location }),
                ...(v.min_level === undefined ? null : { minLevel: v.min_level }),
                ...(v.min_happiness === undefined ? null : { minHappiness: v.min_happiness }),
                ...(v.min_beauty === undefined ? null : { minBeauty: v.min_beauty }),
                ...(v.min_affection === undefined ? null : { minAffection: v.min_affection }),
                ...(v.needs_overworld_rain === undefined
                    ? null
                    : { needsOverworldRain: v.needs_overworld_rain }),
                ...(v.party_species === undefined ? null : { partySpecies: v.party_species }),
                ...(v.party_type === undefined ? null : { partyType: v.party_type }),
                ...(v.relative_physical_stats === undefined
                    ? null
                    : { relativePhysicalStats: v.relative_physical_stats }),
                ...(v.time_of_day === undefined ? null : { timeOfDay: v.time_of_day }),
                ...(v.trade_species === undefined ? null : { tradeSpecies: v.trade_species }),
                ...(v.turn_upside_down === undefined
                    ? null
                    : { turnUpsideDown: v.turn_upside_down }),
            };
        });

    export type Outbound = {
        item?: any | undefined;
        trigger?: EvolutionTrigger$.Outbound | undefined;
        gender?: number | null | undefined;
        held_item?: any | undefined;
        known_move?: any | undefined;
        known_move_type?: any | undefined;
        location?: any | undefined;
        min_level?: number | null | undefined;
        min_happiness?: number | null | undefined;
        min_beauty?: number | null | undefined;
        min_affection?: number | null | undefined;
        needs_overworld_rain?: boolean | undefined;
        party_species?: any | undefined;
        party_type?: any | undefined;
        relative_physical_stats?: number | null | undefined;
        time_of_day?: TimeOfDay | undefined;
        trade_species?: any | undefined;
        turn_upside_down?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EvolutionDetails> = z
        .object({
            item: z.any().optional(),
            trigger: EvolutionTrigger$.outboundSchema.optional(),
            gender: z.number().int().nullable().optional(),
            heldItem: z.any().optional(),
            knownMove: z.any().optional(),
            knownMoveType: z.any().optional(),
            location: z.any().optional(),
            minLevel: z.number().int().nullable().optional(),
            minHappiness: z.number().int().nullable().optional(),
            minBeauty: z.number().int().nullable().optional(),
            minAffection: z.number().int().nullable().optional(),
            needsOverworldRain: z.boolean().optional(),
            partySpecies: z.any().optional(),
            partyType: z.any().optional(),
            relativePhysicalStats: z.number().int().nullable().optional(),
            timeOfDay: TimeOfDay$.optional(),
            tradeSpecies: z.any().optional(),
            turnUpsideDown: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.item === undefined ? null : { item: v.item }),
                ...(v.trigger === undefined ? null : { trigger: v.trigger }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.heldItem === undefined ? null : { held_item: v.heldItem }),
                ...(v.knownMove === undefined ? null : { known_move: v.knownMove }),
                ...(v.knownMoveType === undefined ? null : { known_move_type: v.knownMoveType }),
                ...(v.location === undefined ? null : { location: v.location }),
                ...(v.minLevel === undefined ? null : { min_level: v.minLevel }),
                ...(v.minHappiness === undefined ? null : { min_happiness: v.minHappiness }),
                ...(v.minBeauty === undefined ? null : { min_beauty: v.minBeauty }),
                ...(v.minAffection === undefined ? null : { min_affection: v.minAffection }),
                ...(v.needsOverworldRain === undefined
                    ? null
                    : { needs_overworld_rain: v.needsOverworldRain }),
                ...(v.partySpecies === undefined ? null : { party_species: v.partySpecies }),
                ...(v.partyType === undefined ? null : { party_type: v.partyType }),
                ...(v.relativePhysicalStats === undefined
                    ? null
                    : { relative_physical_stats: v.relativePhysicalStats }),
                ...(v.timeOfDay === undefined ? null : { time_of_day: v.timeOfDay }),
                ...(v.tradeSpecies === undefined ? null : { trade_species: v.tradeSpecies }),
                ...(v.turnUpsideDown === undefined ? null : { turn_upside_down: v.turnUpsideDown }),
            };
        });
}

/** @internal */
export namespace Chain$ {
    export type Inbound = {
        is_baby?: boolean | undefined;
        species?: PokemonSpecies$.Inbound | undefined;
        evolution_details?: Array<EvolutionDetails$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<Chain, z.ZodTypeDef, Inbound> = z
        .object({
            is_baby: z.boolean().optional(),
            species: PokemonSpecies$.inboundSchema.optional(),
            evolution_details: z
                .array(z.lazy(() => EvolutionDetails$.inboundSchema))
                .nullable()
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.is_baby === undefined ? null : { isBaby: v.is_baby }),
                ...(v.species === undefined ? null : { species: v.species }),
                ...(v.evolution_details === undefined
                    ? null
                    : { evolutionDetails: v.evolution_details }),
            };
        });

    export type Outbound = {
        is_baby?: boolean | undefined;
        species?: PokemonSpecies$.Outbound | undefined;
        evolution_details?: Array<EvolutionDetails$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Chain> = z
        .object({
            isBaby: z.boolean().optional(),
            species: PokemonSpecies$.outboundSchema.optional(),
            evolutionDetails: z
                .array(z.lazy(() => EvolutionDetails$.outboundSchema))
                .nullable()
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.isBaby === undefined ? null : { is_baby: v.isBaby }),
                ...(v.species === undefined ? null : { species: v.species }),
                ...(v.evolutionDetails === undefined
                    ? null
                    : { evolution_details: v.evolutionDetails }),
            };
        });
}

/** @internal */
export namespace EvolutionChain$ {
    export type Inbound = {
        id: number;
        baby_trigger_item?: any | null | undefined;
        chain: Chain$.Inbound;
    };

    export const inboundSchema: z.ZodType<EvolutionChain, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            baby_trigger_item: z.any().nullable().optional(),
            chain: z.lazy(() => Chain$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.baby_trigger_item === undefined
                    ? null
                    : { babyTriggerItem: v.baby_trigger_item }),
                chain: v.chain,
            };
        });

    export type Outbound = {
        id: number;
        baby_trigger_item?: any | null | undefined;
        chain: Chain$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EvolutionChain> = z
        .object({
            id: z.number().int(),
            babyTriggerItem: z.any().nullable().optional(),
            chain: z.lazy(() => Chain$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.babyTriggerItem === undefined
                    ? null
                    : { baby_trigger_item: v.babyTriggerItem }),
                chain: v.chain,
            };
        });
}
