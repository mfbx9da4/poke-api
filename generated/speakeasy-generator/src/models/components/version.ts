/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Name, Name$ } from "./name";
import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

export type Version = {
    id: number;
    name: string;
    names: Array<Name>;
    versionGroup: NamedAPIResource;
};

/** @internal */
export namespace Version$ {
    export type Inbound = {
        id: number;
        name: string;
        names: Array<Name$.Inbound>;
        version_group: NamedAPIResource$.Inbound;
    };

    export const inboundSchema: z.ZodType<Version, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            names: z.array(Name$.inboundSchema),
            version_group: NamedAPIResource$.inboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                names: v.names,
                versionGroup: v.version_group,
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        names: Array<Name$.Outbound>;
        version_group: NamedAPIResource$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Version> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            names: z.array(Name$.outboundSchema),
            versionGroup: NamedAPIResource$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                names: v.names,
                version_group: v.versionGroup,
            };
        });
}
