/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Encounter, Encounter$ } from "./encounter";
import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

/**
 * Version details of an encounter.
 */
export type EncounterVersionDetails = {
    version?: NamedAPIResource | undefined;
    /**
     * The total percentage of all encounter potential.
     */
    maxChance?: number | undefined;
    /**
     * A list of encounters and their specifics.
     */
    encounterDetails?: Array<Encounter> | undefined;
};

/** @internal */
export namespace EncounterVersionDetails$ {
    export type Inbound = {
        version?: NamedAPIResource$.Inbound | undefined;
        max_chance?: number | undefined;
        encounter_details?: Array<Encounter$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<EncounterVersionDetails, z.ZodTypeDef, Inbound> = z
        .object({
            version: NamedAPIResource$.inboundSchema.optional(),
            max_chance: z.number().int().optional(),
            encounter_details: z.array(Encounter$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.max_chance === undefined ? null : { maxChance: v.max_chance }),
                ...(v.encounter_details === undefined
                    ? null
                    : { encounterDetails: v.encounter_details }),
            };
        });

    export type Outbound = {
        version?: NamedAPIResource$.Outbound | undefined;
        max_chance?: number | undefined;
        encounter_details?: Array<Encounter$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EncounterVersionDetails> = z
        .object({
            version: NamedAPIResource$.outboundSchema.optional(),
            maxChance: z.number().int().optional(),
            encounterDetails: z.array(Encounter$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.maxChance === undefined ? null : { max_chance: v.maxChance }),
                ...(v.encounterDetails === undefined
                    ? null
                    : { encounter_details: v.encounterDetails }),
            };
        });
}
