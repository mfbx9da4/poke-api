/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Language, Language$ } from "./language";
import { z } from "zod";

/**
 * The various effects of the move `effect_entries`
 */
export type EffectEffect = {
    /**
     * The localized effect text of this effect
     */
    effect: string;
    language: Language;
};

/** @internal */
export namespace EffectEffect$ {
    export type Inbound = {
        effect: string;
        language: Language$.Inbound;
    };

    export const inboundSchema: z.ZodType<EffectEffect, z.ZodTypeDef, Inbound> = z
        .object({
            effect: z.string(),
            language: Language$.inboundSchema,
        })
        .transform((v) => {
            return {
                effect: v.effect,
                language: v.language,
            };
        });

    export type Outbound = {
        effect: string;
        language: Language$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EffectEffect> = z
        .object({
            effect: z.string(),
            language: Language$.outboundSchema,
        })
        .transform((v) => {
            return {
                effect: v.effect,
                language: v.language,
            };
        });
}
