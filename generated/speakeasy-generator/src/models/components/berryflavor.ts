/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { BerryFlavorMap, BerryFlavorMap$ } from "./berryflavormap";
import { z } from "zod";

export type BerryFlavor = {
    /**
     * The identifier for this berry flavor resource
     */
    id: number;
    /**
     * The name for this berry flavor resource
     */
    name: string;
    /**
     * A list of the berries with this flavor
     */
    berries?: Array<BerryFlavorMap> | undefined;
};

/** @internal */
export namespace BerryFlavor$ {
    export type Inbound = {
        id: number;
        name: string;
        berries?: Array<BerryFlavorMap$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<BerryFlavor, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            berries: z.array(BerryFlavorMap$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.berries === undefined ? null : { berries: v.berries }),
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        berries?: Array<BerryFlavorMap$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BerryFlavor> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            berries: z.array(BerryFlavorMap$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.berries === undefined ? null : { berries: v.berries }),
            };
        });
}
