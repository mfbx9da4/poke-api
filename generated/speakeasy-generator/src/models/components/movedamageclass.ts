/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Description, Description$ } from "./description";
import { z } from "zod";

export type MoveDamageClass = {
    id: number;
    name: string;
    descriptions: Array<Description>;
};

/** @internal */
export namespace MoveDamageClass$ {
    export type Inbound = {
        id: number;
        name: string;
        descriptions: Array<Description$.Inbound>;
    };

    export const inboundSchema: z.ZodType<MoveDamageClass, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            descriptions: z.array(Description$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                descriptions: v.descriptions,
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        descriptions: Array<Description$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoveDamageClass> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            descriptions: z.array(Description$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                descriptions: v.descriptions,
            };
        });
}
