/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Pokemon, Pokemon$ } from "./pokemon";
import { z } from "zod";

export type PokemonSpeciesVariety = {
    /**
     * Whether this is the default "natural" variety of this species. Note that "default" is
     *
     * @remarks
     * subjective and that it may not match the Pokémon games' official status.
     *
     */
    isDefault?: boolean | undefined;
    pokemon?: Pokemon | undefined;
    /**
     * The name of this Pokémon species variety
     */
    name?: string | undefined;
};

/** @internal */
export namespace PokemonSpeciesVariety$ {
    export type Inbound = {
        is_default?: boolean | undefined;
        pokemon?: Pokemon$.Inbound | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PokemonSpeciesVariety, z.ZodTypeDef, Inbound> = z
        .object({
            is_default: z.boolean().optional(),
            pokemon: Pokemon$.inboundSchema.optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.is_default === undefined ? null : { isDefault: v.is_default }),
                ...(v.pokemon === undefined ? null : { pokemon: v.pokemon }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        is_default?: boolean | undefined;
        pokemon?: Pokemon$.Outbound | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PokemonSpeciesVariety> = z
        .object({
            isDefault: z.boolean().optional(),
            pokemon: Pokemon$.outboundSchema.optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.isDefault === undefined ? null : { is_default: v.isDefault }),
                ...(v.pokemon === undefined ? null : { pokemon: v.pokemon }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
