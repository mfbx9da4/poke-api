/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FlavorText, FlavorText$ } from "./flavortext";
import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

export type SuperContestEffect = {
    id: number;
    appeal: number;
    flavorTextEntries: Array<FlavorText>;
    moves: Array<NamedAPIResource>;
};

/** @internal */
export namespace SuperContestEffect$ {
    export type Inbound = {
        id: number;
        appeal: number;
        flavor_text_entries: Array<FlavorText$.Inbound>;
        moves: Array<NamedAPIResource$.Inbound>;
    };

    export const inboundSchema: z.ZodType<SuperContestEffect, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            appeal: z.number().int(),
            flavor_text_entries: z.array(FlavorText$.inboundSchema),
            moves: z.array(NamedAPIResource$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                appeal: v.appeal,
                flavorTextEntries: v.flavor_text_entries,
                moves: v.moves,
            };
        });

    export type Outbound = {
        id: number;
        appeal: number;
        flavor_text_entries: Array<FlavorText$.Outbound>;
        moves: Array<NamedAPIResource$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SuperContestEffect> = z
        .object({
            id: z.number().int(),
            appeal: z.number().int(),
            flavorTextEntries: z.array(FlavorText$.outboundSchema),
            moves: z.array(NamedAPIResource$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                appeal: v.appeal,
                flavor_text_entries: v.flavorTextEntries,
                moves: v.moves,
            };
        });
}
