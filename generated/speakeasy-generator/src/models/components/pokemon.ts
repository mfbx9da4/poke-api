/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { PokemonAbility, PokemonAbility$ } from "./pokemonability";
import { PokemonForm, PokemonForm$ } from "./pokemonform";
import { PokemonHeldItem, PokemonHeldItem$ } from "./pokemonhelditem";
import { PokemonMove, PokemonMove$ } from "./pokemonmove";
import { PokemonSprites, PokemonSprites$ } from "./pokemonsprites";
import { PokemonStat, PokemonStat$ } from "./pokemonstat";
import { PokemonType, PokemonType$ } from "./pokemontype";
import { VersionGameIndex, VersionGameIndex$ } from "./versiongameindex";
import { z } from "zod";

export type Pokemon = {
    id: number;
    name: string;
    baseExperience: number;
    height: number;
    isDefault: boolean;
    order: number;
    weight: number;
    abilities: Array<PokemonAbility>;
    forms: Array<PokemonForm>;
    gameIndices: Array<VersionGameIndex>;
    heldItems: Array<PokemonHeldItem>;
    locationAreaEncounters: string;
    moves: Array<PokemonMove>;
    sprites: PokemonSprites;
    species: NamedAPIResource;
    stats: Array<PokemonStat>;
    types: Array<PokemonType>;
};

/** @internal */
export namespace Pokemon$ {
    export type Inbound = {
        id: number;
        name: string;
        base_experience: number;
        height: number;
        is_default: boolean;
        order: number;
        weight: number;
        abilities: Array<PokemonAbility$.Inbound>;
        forms: Array<PokemonForm$.Inbound>;
        game_indices: Array<VersionGameIndex$.Inbound>;
        held_items: Array<PokemonHeldItem$.Inbound>;
        location_area_encounters: string;
        moves: Array<PokemonMove$.Inbound>;
        sprites: PokemonSprites$.Inbound;
        species: NamedAPIResource$.Inbound;
        stats: Array<PokemonStat$.Inbound>;
        types: Array<PokemonType$.Inbound>;
    };

    export const inboundSchema: z.ZodType<Pokemon, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            base_experience: z.number().int(),
            height: z.number().int(),
            is_default: z.boolean(),
            order: z.number().int(),
            weight: z.number().int(),
            abilities: z.array(PokemonAbility$.inboundSchema),
            forms: z.array(PokemonForm$.inboundSchema),
            game_indices: z.array(VersionGameIndex$.inboundSchema),
            held_items: z.array(PokemonHeldItem$.inboundSchema),
            location_area_encounters: z.string(),
            moves: z.array(PokemonMove$.inboundSchema),
            sprites: PokemonSprites$.inboundSchema,
            species: NamedAPIResource$.inboundSchema,
            stats: z.array(PokemonStat$.inboundSchema),
            types: z.array(PokemonType$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                baseExperience: v.base_experience,
                height: v.height,
                isDefault: v.is_default,
                order: v.order,
                weight: v.weight,
                abilities: v.abilities,
                forms: v.forms,
                gameIndices: v.game_indices,
                heldItems: v.held_items,
                locationAreaEncounters: v.location_area_encounters,
                moves: v.moves,
                sprites: v.sprites,
                species: v.species,
                stats: v.stats,
                types: v.types,
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        base_experience: number;
        height: number;
        is_default: boolean;
        order: number;
        weight: number;
        abilities: Array<PokemonAbility$.Outbound>;
        forms: Array<PokemonForm$.Outbound>;
        game_indices: Array<VersionGameIndex$.Outbound>;
        held_items: Array<PokemonHeldItem$.Outbound>;
        location_area_encounters: string;
        moves: Array<PokemonMove$.Outbound>;
        sprites: PokemonSprites$.Outbound;
        species: NamedAPIResource$.Outbound;
        stats: Array<PokemonStat$.Outbound>;
        types: Array<PokemonType$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pokemon> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            baseExperience: z.number().int(),
            height: z.number().int(),
            isDefault: z.boolean(),
            order: z.number().int(),
            weight: z.number().int(),
            abilities: z.array(PokemonAbility$.outboundSchema),
            forms: z.array(PokemonForm$.outboundSchema),
            gameIndices: z.array(VersionGameIndex$.outboundSchema),
            heldItems: z.array(PokemonHeldItem$.outboundSchema),
            locationAreaEncounters: z.string(),
            moves: z.array(PokemonMove$.outboundSchema),
            sprites: PokemonSprites$.outboundSchema,
            species: NamedAPIResource$.outboundSchema,
            stats: z.array(PokemonStat$.outboundSchema),
            types: z.array(PokemonType$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                base_experience: v.baseExperience,
                height: v.height,
                is_default: v.isDefault,
                order: v.order,
                weight: v.weight,
                abilities: v.abilities,
                forms: v.forms,
                game_indices: v.gameIndices,
                held_items: v.heldItems,
                location_area_encounters: v.locationAreaEncounters,
                moves: v.moves,
                sprites: v.sprites,
                species: v.species,
                stats: v.stats,
                types: v.types,
            };
        });
}
