/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Name, Name$ } from "./name";
import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

export type EncounterConditionValue = {
    /**
     * The identifier for this encounter condition value resource
     */
    id: number;
    /**
     * The name for this encounter condition value resource
     */
    name: string;
    condition: NamedAPIResource;
    /**
     * The name of this encounter condition value listed in different languages
     */
    names: Array<Name>;
};

/** @internal */
export namespace EncounterConditionValue$ {
    export type Inbound = {
        id: number;
        name: string;
        condition: NamedAPIResource$.Inbound;
        names: Array<Name$.Inbound>;
    };

    export const inboundSchema: z.ZodType<EncounterConditionValue, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            condition: NamedAPIResource$.inboundSchema,
            names: z.array(Name$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                condition: v.condition,
                names: v.names,
            };
        });

    export type Outbound = {
        id: number;
        name: string;
        condition: NamedAPIResource$.Outbound;
        names: Array<Name$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EncounterConditionValue> = z
        .object({
            id: z.number().int(),
            name: z.string(),
            condition: NamedAPIResource$.outboundSchema,
            names: z.array(Name$.outboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                condition: v.condition,
                names: v.names,
            };
        });
}
