/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { NamedAPIResource, NamedAPIResource$ } from "./namedapiresource";
import { z } from "zod";

export type Name = {
    language?: NamedAPIResource | undefined;
    name?: string | undefined;
};

/** @internal */
export namespace Name$ {
    export type Inbound = {
        language?: NamedAPIResource$.Inbound | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Name, z.ZodTypeDef, Inbound> = z
        .object({
            language: NamedAPIResource$.inboundSchema.optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        language?: NamedAPIResource$.Outbound | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Name> = z
        .object({
            language: NamedAPIResource$.outboundSchema.optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
