/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { Ability } from "./ability";
import { Berry } from "./berry";
import { BerryFirmness } from "./berryfirmness";
import { BerryFlavor } from "./berryflavor";
import { Characteristic } from "./characteristic";
import { ContestEffect } from "./contesteffect";
import { ContestType } from "./contesttype";
import { EggGroup } from "./egggroup";
import { EncounterCondition } from "./encountercondition";
import { EncounterConditionValue } from "./encounterconditionvalue";
import { EncounterMethod } from "./encountermethod";
import { EvolutionChain } from "./evolutionchain";
import { EvolutionTrigger } from "./evolutiontrigger";
import { Gender } from "./gender";
import { Generation } from "./generation";
import { GrowthRate } from "./growthrate";
import { Item } from "./item";
import { ItemAttribute } from "./itemattribute";
import { ItemCategory } from "./itemcategory";
import { ItemFlingEffect } from "./itemflingeffect";
import { ItemPocket } from "./itempocket";
import { Language } from "./language";
import { Location } from "./location";
import { LocationArea } from "./locationarea";
import { Machine } from "./machine";
import { Move } from "./move";
import { MoveAilment } from "./moveailment";
import { MoveBattleStyle } from "./movebattlestyle";
import { MoveCategory } from "./movecategory";
import { MoveDamageClass } from "./movedamageclass";
import { MoveLearnMethod } from "./movelearnmethod";
import { MoveTarget } from "./movetarget";
import { Nature } from "./nature";
import { PalParkArea } from "./palparkarea";
import { PokeathlonStat } from "./pokeathlonstat";
import { Pokedex } from "./pokedex";
import { Pokemon } from "./pokemon";
import { PokemonColor } from "./pokemoncolor";
import { PokemonForm } from "./pokemonform";
import { PokemonHabitat } from "./pokemonhabitat";
import { PokemonShape } from "./pokemonshape";
import { PokemonSpecies } from "./pokemonspecies";
import { Region } from "./region";
import { Stat } from "./stat";
import { SuperContestEffect } from "./supercontesteffect";
import { TypeT } from "./type";
import { Version } from "./version";
import { VersionGroup } from "./versiongroup";

export class PokeSDK extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }

    private _ability?: Ability;
    get ability() {
        return (this._ability ??= new Ability(this.options$));
    }

    private _berryFirmness?: BerryFirmness;
    get berryFirmness() {
        return (this._berryFirmness ??= new BerryFirmness(this.options$));
    }

    private _berryFlavor?: BerryFlavor;
    get berryFlavor() {
        return (this._berryFlavor ??= new BerryFlavor(this.options$));
    }

    private _berry?: Berry;
    get berry() {
        return (this._berry ??= new Berry(this.options$));
    }

    private _characteristic?: Characteristic;
    get characteristic() {
        return (this._characteristic ??= new Characteristic(this.options$));
    }

    private _contestEffect?: ContestEffect;
    get contestEffect() {
        return (this._contestEffect ??= new ContestEffect(this.options$));
    }

    private _contestType?: ContestType;
    get contestType() {
        return (this._contestType ??= new ContestType(this.options$));
    }

    private _eggGroup?: EggGroup;
    get eggGroup() {
        return (this._eggGroup ??= new EggGroup(this.options$));
    }

    private _encounterConditionValue?: EncounterConditionValue;
    get encounterConditionValue() {
        return (this._encounterConditionValue ??= new EncounterConditionValue(this.options$));
    }

    private _encounterCondition?: EncounterCondition;
    get encounterCondition() {
        return (this._encounterCondition ??= new EncounterCondition(this.options$));
    }

    private _encounterMethod?: EncounterMethod;
    get encounterMethod() {
        return (this._encounterMethod ??= new EncounterMethod(this.options$));
    }

    private _evolutionChain?: EvolutionChain;
    get evolutionChain() {
        return (this._evolutionChain ??= new EvolutionChain(this.options$));
    }

    private _evolutionTrigger?: EvolutionTrigger;
    get evolutionTrigger() {
        return (this._evolutionTrigger ??= new EvolutionTrigger(this.options$));
    }

    private _gender?: Gender;
    get gender() {
        return (this._gender ??= new Gender(this.options$));
    }

    private _generation?: Generation;
    get generation() {
        return (this._generation ??= new Generation(this.options$));
    }

    private _growthRate?: GrowthRate;
    get growthRate() {
        return (this._growthRate ??= new GrowthRate(this.options$));
    }

    private _itemAttribute?: ItemAttribute;
    get itemAttribute() {
        return (this._itemAttribute ??= new ItemAttribute(this.options$));
    }

    private _itemCategory?: ItemCategory;
    get itemCategory() {
        return (this._itemCategory ??= new ItemCategory(this.options$));
    }

    private _itemFlingEffect?: ItemFlingEffect;
    get itemFlingEffect() {
        return (this._itemFlingEffect ??= new ItemFlingEffect(this.options$));
    }

    private _itemPocket?: ItemPocket;
    get itemPocket() {
        return (this._itemPocket ??= new ItemPocket(this.options$));
    }

    private _item?: Item;
    get item() {
        return (this._item ??= new Item(this.options$));
    }

    private _language?: Language;
    get language() {
        return (this._language ??= new Language(this.options$));
    }

    private _locationArea?: LocationArea;
    get locationArea() {
        return (this._locationArea ??= new LocationArea(this.options$));
    }

    private _location?: Location;
    get location() {
        return (this._location ??= new Location(this.options$));
    }

    private _machine?: Machine;
    get machine() {
        return (this._machine ??= new Machine(this.options$));
    }

    private _moveAilment?: MoveAilment;
    get moveAilment() {
        return (this._moveAilment ??= new MoveAilment(this.options$));
    }

    private _moveBattleStyle?: MoveBattleStyle;
    get moveBattleStyle() {
        return (this._moveBattleStyle ??= new MoveBattleStyle(this.options$));
    }

    private _moveCategory?: MoveCategory;
    get moveCategory() {
        return (this._moveCategory ??= new MoveCategory(this.options$));
    }

    private _moveDamageClass?: MoveDamageClass;
    get moveDamageClass() {
        return (this._moveDamageClass ??= new MoveDamageClass(this.options$));
    }

    private _moveLearnMethod?: MoveLearnMethod;
    get moveLearnMethod() {
        return (this._moveLearnMethod ??= new MoveLearnMethod(this.options$));
    }

    private _moveTarget?: MoveTarget;
    get moveTarget() {
        return (this._moveTarget ??= new MoveTarget(this.options$));
    }

    private _move?: Move;
    get move() {
        return (this._move ??= new Move(this.options$));
    }

    private _nature?: Nature;
    get nature() {
        return (this._nature ??= new Nature(this.options$));
    }

    private _palParkArea?: PalParkArea;
    get palParkArea() {
        return (this._palParkArea ??= new PalParkArea(this.options$));
    }

    private _pokeathlonStat?: PokeathlonStat;
    get pokeathlonStat() {
        return (this._pokeathlonStat ??= new PokeathlonStat(this.options$));
    }

    private _pokedex?: Pokedex;
    get pokedex() {
        return (this._pokedex ??= new Pokedex(this.options$));
    }

    private _pokemonColor?: PokemonColor;
    get pokemonColor() {
        return (this._pokemonColor ??= new PokemonColor(this.options$));
    }

    private _pokemonForm?: PokemonForm;
    get pokemonForm() {
        return (this._pokemonForm ??= new PokemonForm(this.options$));
    }

    private _pokemonHabitat?: PokemonHabitat;
    get pokemonHabitat() {
        return (this._pokemonHabitat ??= new PokemonHabitat(this.options$));
    }

    private _pokemonShape?: PokemonShape;
    get pokemonShape() {
        return (this._pokemonShape ??= new PokemonShape(this.options$));
    }

    private _pokemonSpecies?: PokemonSpecies;
    get pokemonSpecies() {
        return (this._pokemonSpecies ??= new PokemonSpecies(this.options$));
    }

    private _pokemon?: Pokemon;
    get pokemon() {
        return (this._pokemon ??= new Pokemon(this.options$));
    }

    private _region?: Region;
    get region() {
        return (this._region ??= new Region(this.options$));
    }

    private _stat?: Stat;
    get stat() {
        return (this._stat ??= new Stat(this.options$));
    }

    private _superContestEffect?: SuperContestEffect;
    get superContestEffect() {
        return (this._superContestEffect ??= new SuperContestEffect(this.options$));
    }

    private _type?: TypeT;
    get type() {
        return (this._type ??= new TypeT(this.options$));
    }

    private _versionGroup?: VersionGroup;
    get versionGroup() {
        return (this._versionGroup ??= new VersionGroup(this.options$));
    }

    private _version?: Version;
    get version() {
        return (this._version ??= new Version(this.options$));
    }
}
